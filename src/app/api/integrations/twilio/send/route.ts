// src/app/api/integrations/twilio/send/route.ts
import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth";
import { prisma } from "@/lib/db";

// Pour l'instant, on va simuler Twilio. En production, vous installerez: npm install twilio
// const twilio = require('twilio');
// const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user?.id) {
      return NextResponse.json({ error: "Non autoris√©" }, { status: 401 });
    }

    const { 
      bookingId, 
      messageType, 
      customMessage,
      sendWhatsApp = false 
    } = await request.json();

    // R√©cup√©rer la r√©servation avec les d√©tails
    const booking = await prisma.booking.findUnique({
      where: {
        id: bookingId,
        userId: session.user.id,
      },
      include: {
        service: true,
        client: true,
        user: true,
      },
    });

    if (!booking) {
      return NextResponse.json({ error: "R√©servation introuvable" }, { status: 404 });
    }

    // V√©rifier que le client a un num√©ro de t√©l√©phone
    if (!booking.clientPhone) {
      return NextResponse.json({ 
        error: "Aucun num√©ro de t√©l√©phone pour ce client" 
      }, { status: 400 });
    }

    // G√©n√©rer le message selon le type
    const message = customMessage || generateMessage(messageType, booking);

    // Envoyer via Twilio (simul√© pour l'instant)
    const result = await sendTwilioMessage({
      to: booking.clientPhone,
      message: message,
      whatsapp: sendWhatsApp,
      bookingId: booking.id,
    });

    // Enregistrer l'envoi en base
    await logMessageSent({
      bookingId: booking.id,
      userId: session.user.id,
      phone: booking.clientPhone,
      message: message,
      type: messageType,
      whatsapp: sendWhatsApp,
      status: result.success ? "sent" : "failed",
      twilioId: result.messageId || null,
    });

    return NextResponse.json({
      success: true,
      messageId: result.messageId,
      message: "Message envoy√© avec succ√®s",
    });

  } catch (error) {
    console.error("Erreur envoi SMS/WhatsApp:", error);
    return NextResponse.json(
      { error: "Erreur lors de l'envoi" },
      { status: 500 }
    );
  }
}

function generateMessage(type: string, booking: any): string {
  const clientName = booking.clientName;
  const serviceName = booking.service.name;
  const businessName = booking.user.businessName || booking.user.name;
  const date = new Date(booking.startTime).toLocaleDateString('fr-FR');
  const time = new Date(booking.startTime).toLocaleTimeString('fr-FR', { 
    hour: '2-digit', 
    minute: '2-digit' 
  });

  const messages = {
    confirmation: `‚úÖ Bonjour ${clientName} ! 

Votre RDV est confirm√© :
üìÖ ${serviceName}
üóìÔ∏è ${date} √† ${time}
üìç Chez ${businessName}

Merci de nous pr√©venir 24h √† l'avance en cas d'emp√™chement.

√Ä bient√¥t !`,

    reminder: `üìÖ Rappel RDV - ${clientName}

N'oubliez pas votre rendez-vous DEMAIN :
‚è∞ ${time} - ${serviceName}
üìç ${businessName}

En cas d'emp√™chement, merci de nous pr√©venir rapidement.

√Ä demain ! üòä`,

    modification: `üîÑ RDV modifi√© - ${clientName}

Votre rendez-vous a √©t√© modifi√© :
üìÖ Nouveau cr√©neau : ${date} √† ${time}
üè• ${serviceName} chez ${businessName}

Merci de confirmer ce nouveau cr√©neau.`,

    cancellation: `‚ùå RDV annul√© - ${clientName}

Votre rendez-vous du ${date} √† ${time} a √©t√© annul√©.

Pour reprendre un nouveau RDV, contactez-nous ou utilisez notre syst√®me de r√©servation en ligne.

Merci de votre compr√©hension.`,

    custom: `Message personnalis√© pour ${clientName}`
  };

  return messages[type as keyof typeof messages] || messages.custom;
}

async function sendTwilioMessage(params: {
  to: string;
  message: string;
  whatsapp: boolean;
  bookingId: string;
}) {
  const { to, message, whatsapp, bookingId } = params;

  try {
    // SIMULATION pour l'instant (remplacez par le vrai code Twilio en production)
    console.log("üì± SIMULATION - Message Twilio:", {
      to: whatsapp ? `whatsapp:${to}` : to,
      body: message,
      from: whatsapp 
        ? process.env.TWILIO_WHATSAPP_NUMBER 
        : process.env.TWILIO_PHONE_NUMBER,
      bookingId
    });

    /* CODE TWILIO R√âEL (√† d√©commenter en production) :
    
    const client = require('twilio')(
      process.env.TWILIO_ACCOUNT_SID, 
      process.env.TWILIO_AUTH_TOKEN
    );

    const twilioMessage = await client.messages.create({
      body: message,
      from: whatsapp 
        ? process.env.TWILIO_WHATSAPP_NUMBER 
        : process.env.TWILIO_PHONE_NUMBER,
      to: whatsapp ? `whatsapp:${to}` : to,
    });

    return {
      success: true,
      messageId: twilioMessage.sid,
      status: twilioMessage.status
    };
    */

    // Simulation de succ√®s
    return {
      success: true,
      messageId: `twilio_sim_${Date.now()}`,
      status: "sent"
    };

  } catch (error) {
    console.error("Erreur Twilio:", error);
    return {
      success: false,
      error: error.message
    };
  }
}

async function logMessageSent(data: {
  bookingId: string;
  userId: string;
  phone: string;
  message: string;
  type: string;
  whatsapp: boolean;
  status: string;
  twilioId: string | null;
}) {
  try {
    // TODO: Cr√©er une table pour logger les messages envoy√©s
    console.log("üíæ Log message envoy√©:", data);
    
    /* √Ä impl√©menter en base :
    await prisma.messageSent.create({
      data: {
        bookingId: data.bookingId,
        userId: data.userId,
        phone: data.phone,
        message: data.message,
        type: data.type,
        whatsapp: data.whatsapp,
        status: data.status,
        twilioId: data.twilioId,
        sentAt: new Date(),
      }
    });
    */
  } catch (error) {
    console.error("Erreur sauvegarde log:", error);
  }
}